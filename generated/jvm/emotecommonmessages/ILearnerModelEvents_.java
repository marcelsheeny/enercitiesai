// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

package emotecommonmessages;

@net.sf.jni4net.attributes.ClrTypeInfo
public final class ILearnerModelEvents_ {
    
    //<generated-static>
    private static system.Type staticType;
    
    public static system.Type typeof() {
        return emotecommonmessages.ILearnerModelEvents_.staticType;
    }
    
    private static void InitJNI(net.sf.jni4net.inj.INJEnv env, system.Type staticType) {
        emotecommonmessages.ILearnerModelEvents_.staticType = staticType;
    }
    //</generated-static>
}

//<generated-proxy>
@net.sf.jni4net.attributes.ClrProxy
class __ILearnerModelEvents extends system.Object implements emotecommonmessages.ILearnerModelEvents {
    
    protected __ILearnerModelEvents(net.sf.jni4net.inj.INJEnv __env, long __handle) {
            super(__env, __handle);
    }
    
    @net.sf.jni4net.attributes.ClrMethod("(IIIIILSystem/String;Z[LSystem/String;[Z[LSystem/String;[LSystem/String;[D[I[D[D[LEmoteCommonMessages/AffectPerceptionState;[LEmoteCommonMessages/Charge;[I)V")
    public native void learnerModelValueUpdate(
                int learnerId, 
                int stepId, 
                int activityId, 
                int scenarioId, 
                int sessionId, 
                java.lang.String reasonForUpdate, 
                boolean correct, 
                java.lang.String[] competencyName, 
                boolean[] competencyCorrect, 
                java.lang.String[] competencyActual, 
                java.lang.String[] competencyExpected, 
                double[] comptencyValue, 
                int[] competencyConfidence, 
                double[] oldCompetencyValue, 
                double[] competencyDelta, 
                emotecommonmessages.AffectPerceptionState[] state, 
                emotecommonmessages.Charge[] stateCharge, 
                int[] stateConfidence);
}
//</generated-proxy>
